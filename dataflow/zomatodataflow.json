{
	"name": "zomatodataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "zomato",
						"type": "DatasetReference"
					},
					"name": "zomato"
				},
				{
					"dataset": {
						"referenceName": "country_code",
						"type": "DatasetReference"
					},
					"name": "countrycode"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable4",
						"type": "DatasetReference"
					},
					"name": "finalflat"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "ranking"
				},
				{
					"name": "select1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "updatedVote"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Restaurant ID} as string,",
				"          {Restaurant Name} as string,",
				"          cc as string,",
				"          City as string,",
				"          Address as string,",
				"          Locality as string,",
				"          {Locality Verbose} as string,",
				"          Longitude as string,",
				"          Latitude as string,",
				"          Cuisines as string,",
				"          {Average Cost for two} as string,",
				"          Currency as string,",
				"          {Has Table booking} as string,",
				"          {Has Online delivery} as string,",
				"          {Is delivering now} as string,",
				"          {Switch to order menu} as string,",
				"          {Price range} as string,",
				"          {Aggregate rating} as string,",
				"          {Rating color} as string,",
				"          {Rating text} as string,",
				"          Votes as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> zomato",
				"source(output(",
				"          cc as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countrycode",
				"zomato, countrycode join(zomato@cc == countrycode@cc,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select2 rank(desc(Votes, true),",
				"     output(rank2 as long)) ~> ranking",
				"join1 select(mapColumn(",
				"          {Restaurant ID},",
				"          {Restaurant Name},",
				"          cc = zomato@cc,",
				"          City,",
				"          Address,",
				"          Locality,",
				"          {Locality Verbose},",
				"          Longitude,",
				"          Latitude,",
				"          Cuisines,",
				"          {Average Cost for two},",
				"          Currency,",
				"          {Has Table booking},",
				"          {Has Online delivery},",
				"          {Is delivering now},",
				"          {Switch to order menu},",
				"          {Price range},",
				"          {Aggregate rating},",
				"          {Rating color},",
				"          {Rating text},",
				"          Votes,",
				"          cc = countrycode@cc,",
				"          Country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 cast(output(",
				"          Votes as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive({updated vote} = coalesce(Votes,0)) ~> updatedVote",
				"updatedVote select(mapColumn(",
				"          {Restaurant ID},",
				"          {Restaurant Name},",
				"          cc,",
				"          City,",
				"          Address,",
				"          Locality,",
				"          {Locality Verbose},",
				"          Longitude,",
				"          Latitude,",
				"          Cuisines,",
				"          {Average Cost for two},",
				"          Currency,",
				"          {Has Table booking},",
				"          {Has Online delivery},",
				"          {Is delivering now},",
				"          {Switch to order menu},",
				"          {Price range},",
				"          {Aggregate rating},",
				"          {Rating color},",
				"          {Rating text},",
				"          Country,",
				"          Votes = {updated vote}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"ranking sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> finalflat"
			]
		}
	}
}